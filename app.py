import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω",
    page_icon="üõ¢Ô∏è",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üõ¢Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω")
st.markdown("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä–æ—Ç–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ú–∞—Ä–∫–æ–≤—Å–∫–∏—Ö —Ü–µ–ø–µ–π –∏ —Ü–∏–∫–ª–æ–≤ —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏–∏/—Ä–µ–≥—Ä–µ—Å—Å–∏–∏")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
n_depth = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø–æ –≥–ª—É–±–∏–Ω–µ", 100, 2000, 1000, 50)
depth_start = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (–º)", 0, 5000, 1000)
depth_end = st.sidebar.number_input("–ö–æ–Ω–µ—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (–º)", 1000, 10000, 2000)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–∫–ª–æ–≤
cycle_length = st.sidebar.slider("–î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏–∏/—Ä–µ–≥—Ä–µ—Å—Å–∏–∏", 50, 500, 200, 25)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ—Ä—Å–∏–∏
invasion_window = st.sidebar.slider("–û–∫–Ω–æ –∏–Ω–≤–µ—Ä—Å–∏–∏", 3, 15, 7, 1)
invasion_strength = st.sidebar.slider("–°–∏–ª–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏", 0.0, 1.0, 0.6, 0.1)

# –ß–∞—Å—Ç–æ—Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –ª–∏—Ç–æ–ª–æ–≥–∏–π
st.sidebar.subheader("–ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ –ª–∏—Ç–æ–ª–æ–≥–∏–π")
lithology_freq_range = {}
lithology_states = ['sand', 'shale', 'carbonate_sand', 'coal', 'siltstone']
lithology_names = ['–ü–µ—Å–æ–∫', '–ì–ª–∏–Ω–∞', '–ö–∞—Ä–±–æ–Ω–∞—Ç–Ω—ã–π –ø–µ—Å–æ–∫', '–£–≥–æ–ª—å', '–ê–ª–µ–≤—Ä–æ–ª–∏—Ç']

for i, (lith, name) in enumerate(zip(lithology_states, lithology_names)):
    col1, col2 = st.sidebar.columns(2)
    with col1:
        min_freq = st.number_input(f"{name} –º–∏–Ω", 0.0, 1.0, 
                                 [0.01, 0.35, 0.05, 0.01, 0.05][i], 0.01, key=f"min_{lith}")
    with col2:
        max_freq = st.number_input(f"{name} –º–∞–∫—Å", 0.0, 1.0, 
                                 [0.15, 0.9, 0.12, 0.08, 0.15][i], 0.01, key=f"max_{lith}")
    lithology_freq_range[lith] = (min_freq, max_freq)

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª–∏–Ω—ã —Å–µ—Ä–∏–π
st.sidebar.subheader("–î–ª–∏–Ω–∞ —Å–µ—Ä–∏–π –ª–∏—Ç–æ–ª–æ–≥–∏–π")
series_length_range = {}
for i, (lith, name) in enumerate(zip(lithology_states, lithology_names)):
    col1, col2 = st.sidebar.columns(2)
    with col1:
        min_len = st.number_input(f"{name} –º–∏–Ω", 1, 50, 
                                [2, 1, 2, 1, 2][i], 1, key=f"min_len_{lith}")
    with col2:
        max_len = st.number_input(f"{name} –º–∞–∫—Å", 1, 200, 
                                [10, 155, 6, 4, 20][i], 1, key=f"max_len_{lith}")
    series_length_range[lith] = (min_len, max_len)

# –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def sample_initial_prob(freq_range):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
    freqs = [np.random.uniform(low, high) for (low, high) in freq_range.values()]
    freqs = np.array(freqs)
    freqs /= freqs.sum()
    return freqs

def generate_lithology_markov_cycles(n, states, trans_matrix, initial_prob, series_range, cycle_len=200):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ç–æ–ª–æ–≥–∏–∏ —Å —Ü–∏–∫–ª–∞–º–∏ —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏–∏/—Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
    lithology = []
    current_lith = np.random.choice(states, p=initial_prob)
    lithology.append(current_lith)

    for i in range(1, n):
        cycle_phase = (i // cycle_len) % 2  # 0 = —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏—è, 1 = —Ä–µ–≥—Ä–µ—Å—Å–∏—è

        if cycle_phase == 0:  # –¢—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏—è: sand‚Üísiltstone‚Üíshale
            bias_matrix = np.array([
                [0.4, 0.2, 0.05, 0.05, 0.3],
                [0.2, 0.4, 0.1, 0.05, 0.25],
                [0.1, 0.2, 0.5, 0.05, 0.15],
                [0.1, 0.1, 0.05, 0.7, 0.05],
                [0.15, 0.25, 0.2, 0.05, 0.35]
            ])
        else:  # –†–µ–≥—Ä–µ—Å—Å–∏—è: shale‚Üísiltstone‚Üísand
            bias_matrix = np.array([
                [0.6, 0.1, 0.1, 0.05, 0.15],
                [0.3, 0.3, 0.05, 0.05, 0.3],
                [0.3, 0.1, 0.4, 0.05, 0.15],
                [0.1, 0.1, 0.1, 0.6, 0.1],
                [0.3, 0.2, 0.1, 0.05, 0.35]
            ])

        prev_idx = states.index(current_lith)
        probs = 0.5 * trans_matrix[prev_idx] + 0.5 * bias_matrix[prev_idx]
        probs /= probs.sum()
        current_lith = np.random.choice(states, p=probs)
        lithology.append(current_lith)

    # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º —Å–µ—Ä–∏–∏
    lith_expanded = []
    for lith in lithology:
        min_len, max_len = series_range[lith]
        run_len = np.random.randint(min_len, max_len + 1)
        lith_expanded.extend([lith] * run_len)

    return lith_expanded[:n]

def apply_invasion_effect(curve, window=5, alpha=0.5):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏"""
    curve = np.array(curve)
    kernel = np.ones(window) / window
    smooth = np.convolve(curve, kernel, mode="same")
    return alpha*smooth + (1-alpha)*curve

# –ë–∞–∑–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
transition_matrix = np.array([
    [0.6, 0.2, 0.1, 0.05, 0.05],   # sand
    [0.3, 0.5, 0.1, 0.05, 0.05],   # shale
    [0.2, 0.1, 0.6, 0.05, 0.05],   # carbonate_sand
    [0.1, 0.1, 0.1, 0.6, 0.1],     # coal
    [0.2, 0.2, 0.2, 0.05, 0.35]    # siltstone
])

# –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if st.sidebar.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫–≤–∞–∂–∏–Ω—É", type="primary"):
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Å–∫–≤–∞–∂–∏–Ω—É..."):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        initial_prob = sample_initial_prob(lithology_freq_range)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ç–æ–ª–æ–≥–∏–∏
        lithology = generate_lithology_markov_cycles(
            n_depth, lithology_states, transition_matrix, initial_prob, 
            series_length_range, cycle_len=cycle_length
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª—É–±–∏–Ω
        depths = np.linspace(depth_start, depth_end, n_depth)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–∏—è
        phi, sw = [], []
        for lith in lithology:
            if lith == 'sand':
                phi.append(np.random.normal(0.25, 0.03))
                sw.append(np.random.normal(0.3, 0.05))
            elif lith == 'shale':
                phi.append(np.random.normal(0.15, 0.02))
                sw.append(np.random.normal(0.8, 0.05))
            elif lith == 'carbonate_sand':
                phi.append(np.random.normal(0.20, 0.02))
                sw.append(np.random.normal(0.4, 0.05))
            elif lith == 'coal':
                phi.append(np.random.normal(0.35, 0.04))
                sw.append(np.random.normal(0.2, 0.05))
            elif lith == 'siltstone':
                phi.append(np.random.normal(0.18, 0.02))
                sw.append(np.random.normal(0.5, 0.05))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä–æ—Ç–∞–∂–∞
        matrix_density = {'sand':2.65, 'shale':2.55, 'carbonate_sand':2.71, 'coal':1.4, 'siltstone':2.62}
        rho_fluid = 1.0
        gamma_base = {'sand':40, 'shale':70, 'carbonate_sand':35, 'coal':30, 'siltstone':60}
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä–æ—Ç–∞–∂–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö
        gamma_log, rho_log = [], []
        for i, lith in enumerate(lithology):
            gamma_log.append(np.random.normal(gamma_base[lith], 3))
            rho = phi[i]*rho_fluid + (1-phi[i])*matrix_density[lith]
            rho += np.random.normal(0, 0.02)
            rho_log.append(rho)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏
        gamma_inv = apply_invasion_effect(gamma_log, window=invasion_window, alpha=invasion_strength)
        rho_inv = apply_invasion_effect(rho_log, window=invasion_window, alpha=invasion_strength)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        df = pd.DataFrame({
            'Depth': depths,
            'Lithology': lithology,
            'Porosity': phi,
            'Sw': sw,
            'Gamma_clean': gamma_log,
            'Gamma_inv': gamma_inv,
            'Rho_clean': rho_log,
            'Rho_inv': rho_inv
        })
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
        st.session_state['well_data'] = df
        st.session_state['well_generated'] = True

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.get('well_generated', False):
    df = st.session_state['well_data']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–ì–ª—É–±–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", f"{depth_start}-{depth_end} –º")
    with col2:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", len(df))
    with col3:
        st.metric("–°—Ä–µ–¥–Ω—è—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å", f"{df['Porosity'].mean():.3f}")
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ", f"{df['Sw'].mean():.3f}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Ç–æ–ª–æ–≥–∏–π
    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Ç–æ–ª–æ–≥–∏–π")
    lith_counts = df['Lithology'].value_counts()
    lith_percentages = (lith_counts / len(df) * 100).round(1)
    
    col1, col2 = st.columns(2)
    with col1:
        st.bar_chart(lith_percentages)
    with col2:
        for lith, count in lith_counts.items():
            percentage = lith_percentages[lith]
            st.write(f"**{lith}**: {count} —Ç–æ—á–µ–∫ ({percentage}%)")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä–æ—Ç–∞–∂–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö
    st.subheader("üìà –ö–∞—Ä–æ—Ç–∞–∂–Ω—ã–µ –∫—Ä–∏–≤—ã–µ")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    plt.rcParams['font.family'] = 'DejaVu Sans'
    
    fig, axs = plt.subplots(1, 3, figsize=(15, 8), sharey=True)
    
    # –ì–ö
    axs[0].plot(df['Gamma_clean'], df['Depth'], label='–ß–∏—Å—Ç—ã–π –ì–ö', color='green', alpha=0.5, linewidth=0.8)
    axs[0].plot(df['Gamma_inv'], df['Depth'], label='–ì–ö —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π', color='black', linewidth=1)
    axs[0].set_title('–ì–∞–º–º–∞-–∫–∞—Ä–æ—Ç–∞–∂')
    axs[0].set_xlabel('–ì–ö (API)')
    axs[0].set_ylabel('–ì–ª—É–±–∏–Ω–∞ (–º)')
    axs[0].invert_yaxis()
    axs[0].legend()
    axs[0].grid(True, alpha=0.3)
    
    # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å
    axs[1].plot(df['Rho_clean'], df['Depth'], label='–ß–∏—Å—Ç–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å', color='blue', alpha=0.5, linewidth=0.8)
    axs[1].plot(df['Rho_inv'], df['Depth'], label='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π', color='red', linewidth=1)
    axs[1].set_title('–ì–ì–ö–ü (Density)')
    axs[1].set_xlabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/—Å–º¬≥)')
    axs[1].invert_yaxis()
    axs[1].legend()
    axs[1].grid(True, alpha=0.3)
    
    # –ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å
    axs[2].plot(df['Porosity'], df['Depth'], color='orange', linewidth=1)
    axs[2].set_title('–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å')
    axs[2].set_xlabel('–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å (–¥–æ–ª–∏)')
    axs[2].invert_yaxis()
    axs[2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # –ö—Ä–æ—Å—Å–ø–ª–æ—Ç—ã
    st.subheader("üîç –ö—Ä–æ—Å—Å–ø–ª–æ—Ç—ã")
    
    palette_lith = {
        'sand': 'yellow', 'shale': 'brown', 'carbonate_sand': 'orange', 
        'coal': 'black', 'siltstone': 'gray'
    }
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.scatterplot(data=df, x='Gamma_inv', y='Rho_inv', hue='Lithology', 
                       palette=palette_lith, alpha=0.7, ax=ax)
        ax.set_title('Crossplot Gamma vs Density –ø–æ –ª–∏—Ç–æ–ª–æ–≥–∏–∏')
        ax.set_xlabel('–ì–ö (API)')
        ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/—Å–º¬≥)')
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
    
    with col2:
        fig, ax = plt.subplots(figsize=(8, 6))
        sc = ax.scatter(df['Gamma_inv'], df['Rho_inv'], c=df['Porosity'], 
                       cmap='viridis', alpha=0.7)
        ax.set_title('Crossplot Gamma vs Density –ø–æ –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç–∏')
        ax.set_xlabel('–ì–ö (API)')
        ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/—Å–º¬≥)')
        ax.grid(True, alpha=0.3)
        plt.colorbar(sc, ax=ax, label='–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å')
        st.pyplot(fig)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å–ø–ª–æ—Ç
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.scatterplot(data=df, x='Rho_inv', y='Porosity', hue='Lithology', 
                   palette=palette_lith, alpha=0.7, ax=ax)
    ax.set_title('Crossplot Density vs Porosity –ø–æ –ª–∏—Ç–æ–ª–æ–≥–∏–∏')
    ax.set_xlabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/—Å–º¬≥)')
    ax.set_ylabel('–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å (–¥–æ–ª–∏)')
    ax.grid(True, alpha=0.3)
    st.pyplot(fig)
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìã –î–∞–Ω–Ω—ã–µ —Å–∫–≤–∞–∂–∏–Ω—ã")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns(2)
    with col1:
        show_clean = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—ã–µ –∫—Ä–∏–≤—ã–µ", value=False)
    with col2:
        depth_filter = st.slider("–§–∏–ª—å—Ç—Ä –ø–æ –≥–ª—É–±–∏–Ω–µ", 
                                float(df['Depth'].min()), 
                                float(df['Depth'].max()), 
                                (float(df['Depth'].min()), float(df['Depth'].max())))
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    df_filtered = df[(df['Depth'] >= depth_filter[0]) & (df['Depth'] <= depth_filter[1])]
    
    if not show_clean:
        df_display = df_filtered.drop(['Gamma_clean', 'Rho_clean'], axis=1)
    else:
        df_display = df_filtered
    
    st.dataframe(df_display, use_container_width=True)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        csv = df.to_csv(index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"synthetic_well_{depth_start}_{depth_end}m.csv",
            mime="text/csv"
        )
    
    with col2:
        # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Well_Data', index=False)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_df = pd.DataFrame({
                'Parameter': ['Total Points', 'Depth Range (m)', 'Avg Porosity', 'Avg Sw', 'Avg Gamma', 'Avg Density'],
                'Value': [
                    len(df),
                    f"{df['Depth'].min():.1f} - {df['Depth'].max():.1f}",
                    f"{df['Porosity'].mean():.3f}",
                    f"{df['Sw'].mean():.3f}",
                    f"{df['Gamma_inv'].mean():.1f}",
                    f"{df['Rho_inv'].mean():.2f}"
                ]
            })
            stats_df.to_excel(writer, sheet_name='Statistics', index=False)
        
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel",
            data=output.getvalue(),
            file_name=f"synthetic_well_{depth_start}_{depth_end}m.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

else:
    st.info("üëà –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫–≤–∞–∂–∏–Ω—É' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
with st.expander("‚ÑπÔ∏è –û –º–æ–¥–µ–ª–∏"):
    st.markdown("""
    ### –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω
    
    **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
    
    1. **–ú–∞—Ä–∫–æ–≤—Å–∫–∞—è —Ü–µ–ø—å** - –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ª–∏—Ç–æ–ª–æ–≥–∏—è–º–∏
    2. **–¶–∏–∫–ª—ã —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏–∏/—Ä–µ–≥—Ä–µ—Å—Å–∏–∏** - –∏–º–∏—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    3. **–≠—Ñ—Ñ–µ–∫—Ç –∏–Ω–≤–µ—Ä—Å–∏–∏** - —Å–º–∞–∑—ã–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–µ–≤ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
    
    **–õ–∏—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã:**
    - **–ü–µ—Å–æ–∫** - –≤—ã—Å–æ–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å, –Ω–∏–∑–∫–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ
    - **–ì–ª–∏–Ω–∞** - –Ω–∏–∑–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å, –≤—ã—Å–æ–∫–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ  
    - **–ö–∞—Ä–±–æ–Ω–∞—Ç–Ω—ã–π –ø–µ—Å–æ–∫** - —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    - **–£–≥–æ–ª—å** - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å, –Ω–∏–∑–∫–æ–µ –Ω–∞—Å—ã—â–µ–Ω–∏–µ
    - **–ê–ª–µ–≤—Ä–æ–ª–∏—Ç** - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    
    **–ö–∞—Ä–æ—Ç–∞–∂–Ω—ã–µ –∫—Ä–∏–≤—ã–µ:**
    - **–ì–ö (–ì–∞–º–º–∞-–∫–∞—Ä–æ—Ç–∞–∂)** - —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–¥
    - **–ì–ì–ö–ü (–ì–∞–º–º–∞-–≥–∞–º–º–∞ –∫–∞—Ä–æ—Ç–∞–∂ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏)** - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–¥
    - **–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å** - –æ–±—ä–µ–º –ø—É—Å—Ç–æ—Ç –≤ –ø–æ—Ä–æ–¥–µ
    - **–ù–∞—Å—ã—â–µ–Ω–∏–µ** - –¥–æ–ª—è –≤–æ–¥—ã –≤ –ø–æ—Ä–∞—Ö
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üõ¢Ô∏è **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω** | –°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit")
